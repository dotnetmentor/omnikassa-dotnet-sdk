trigger: none
name: $(date:yyyyMMdd)$(rev:.r)
resources:
  repositories:
    - repository: self
      type: git
      ref: master
variables:
  - group: omnikassa-net-sdk-release
  - name: buildConfiguration
    value: Release
jobs:
  - job: NETSDK_Release
    displayName: .NET SDK Release
    pool:
      name: Rabo-Windows-Production
    steps:
      - checkout: self
        persistCredentials: True
      - task: NuGetToolInstaller@0
        displayName: Use NuGet 5.11.0
        inputs:
          versionSpec: 5.11.0
      - task: DownloadSecureFile@1
        name: OmniKassaPFX
        displayName: 'Download CA certificate'
        inputs:
          secureFile: 'omnikassa.netsdk.rabobank.nl.pfx'
      - task: PowerShell@2
        displayName: Add certificates
        inputs:
          targetType: 'inline'
          script: |
            Write-Host "Start adding the PFX file to the certificate store."

            $pfxpath = '$(OmniKassaPFX.secureFilePath)'
            $password = '$(cert.password)'

            Add-Type -AssemblyName System.Security
            $cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2
            $cert.Import($pfxpath, $password, [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]"PersistKeySet")
            $store = new-object system.security.cryptography.X509Certificates.X509Store -argumentlist "MY", CurrentUser
            $store.Open([System.Security.Cryptography.X509Certificates.OpenFlags]"ReadWrite")
            $store.Add($cert)
            $store.Close()
      - task: NuGetCommand@2
        displayName: NuGet restore
        inputs:
          solution: $(BuildParameters.solution)
      - task: DotNetCoreCLI@2
        displayName: Build Omnikassa SDK
        inputs:
          projects: OmniKassa.sln
          arguments: '--configuration $(buildConfiguration)'
      - task: DotNetCoreCLI@2
        displayName: Test Assemblies
        inputs:
          command: test
          projects: OmniKassa.sln
          publishTestResults: true
          arguments: '--collect "Code coverage"'
      - task: DotNetCoreCLI@2
        displayName: 'Create nuget package'
        inputs:
          command: 'pack'
          packagesToPack: 'src/OmniKassa/OmniKassa.csproj'
          packDirectory: '$(Build.ArtifactStagingDirectory)'
          nobuild: true
          versioningScheme: 'off'
      - task: NuGetCommand@2
        displayName: 'check trusted signers'
        inputs:
          command: 'custom'
          arguments: 'trusted-signers'
      - task: NuGetCommand@2
        displayName: 'add trusted signers'
        inputs:
          command: 'custom'
          arguments: 'trusted-signers add -Name Digicert -CertificateFingerprint $(cert.fingerprint) -AllowUntrustedRoot'
      - task: NuGetCommand@2
        displayName: 'check trusted signersw'
        inputs:
          command: 'custom'
          arguments: 'trusted-signers'
      - task: NuGetCommand@2
        displayName: 'Sign nuget package'
        inputs:
          command: 'custom'
          arguments: 'sign $(Build.ArtifactStagingDirectory)\*.nupkg -CertificatePath $(OmniKassaPFX.secureFilePath) -CertificatePassword $(cert.password) -TimeStamper http://timestamp.digicert.com'
      - task: NuGetCommand@2
        displayName: 'NuGet push'
        inputs:
          command: push
          packagesToPush: '$(Build.ArtifactStagingDirectory)\*.nupkg'
          nuGetFeedType: external
          publishFeedCredentials: 'nuget-omnikassa-net-sdk-connection'     
